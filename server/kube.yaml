apiVersion: v1
kind: Namespace
metadata:
  name: jseries
  labels:
    name: jseries
  annotations:
    written.by: cstone

## TO-DO: Ingress not currently working, but I don't care at the moment, so just moving on.
# ---
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: ingress-resource
#   namespace: jseries
#   annotations:
#     nginx.ingress.kubernetes.io/ssl-redirect: "false"
#     nginx.ingress.kubernetes.io/use-regex: "true"
#     nginx.ingress.kubernetes.io/configuration-snippet: proxy_set_header X-Script-Name /pgadmin;
# spec:
#   ingressClassName: nginx
#   rules:
#   - http:
#       paths:
#       - path: /pgadmin(/|$)(.*)
#         pathType: Prefix
#         backend:
#           service:
#             name: pgadmin
#             port:
#               number: 30200


#     This is PersistentVolume Kube Object with Name postgres-pv (used by the postgres), when using the 
# production enviroment don't use this, use the longhorn service.
---
apiVersion: v1
kind: PersistentVolume
metadata:
  annotations:
    written.by: cstone
  name: postgres-pv
  namespace: jseries
spec:
  accessModes:
  - ReadWriteOnce
  capacity:
    storage: 25Gi
  storageClassName: local-storage
  local:
    path: /run/desktop/mnt/host/c/Users/c.stone/Desktop/805_projects/jseries/server/postgres/data
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - docker-desktop
  volumeMode: Filesystem 

#     This is PersistentVolumeClaim Kube Object with Name postgres-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    written.by: cstone
  name: postgres-pvc
  namespace: jseries
spec:
  storageClassName: local-storage
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  volumeName: postgres-pv

#     This is Pod Configuration Kube definition for the postgresql server
---
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: postgres
  name: postgres
  namespace: jseries
spec:
  containers:
    - name: postgres
      image: localhost:5000/postgres
      imagePullPolicy: IfNotPresent
      resources:
        requests:
          cpu: 2
          memory: 8Gi
        limits:
          cpu: 4
          memory: 16Gi
      env:
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          value: password
        - name: POSTGRES_DB
          value: postgres
      ports:
      - containerPort: 5432
        name: postgres-port
        protocol: TCP
      volumeMounts:
      - mountPath: /var/lib/postgresql/data
        name: postgres-pv
  terminationGracePeriodSeconds: 0
  volumes:
  - name: postgres-pv
    persistentVolumeClaim:
      claimName: postgres-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-svc
  namespace: jseries
spec:
  ports:
  - name: postgres-port
    port: 5432
    protocol: TCP
    targetPort: 5432
  selector:
    app: postgres
  type: NodePort

#     Create the pgadmin pod/service
---
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: pgadmin
  name: pgadmin
  namespace: jseries
spec:
  containers:
  - name: pgadmin
    image: dpage/pgadmin4:9.0.0
    imagePullPolicy: IfNotPresent
    resources:
      requests:
        cpu: 1
        memory: 1Gi
      limits:
        cpu: 2
        memory: 8Gi
    env:
    - name: PGADMIN_DEFAULT_EMAIL
      value: user@user.org
    - name: PGADMIN_DEFAULT_PASSWORD
      value: password
    ports:
    - containerPort: 80
      name: pgadmin-port
      protocol: TCP
  terminationGracePeriodSeconds: 0

---
apiVersion: v1
kind: Service
metadata:
  name: pgadmin-svc
  namespace: jseries
spec:
  ports:
  - name: pgadmin-port
    port: 80
    protocol: TCP
    nodePort: 30200
  selector:
    app: pgadmin
  type: NodePort


#     This is Pod Configuration Ollama server api definition
---
apiVersion: v1
kind: Pod
metadata:
  name: ollama
  namespace: jseries
spec:
  containers:
  - name: ollama
    # image: ollama/ollama:0.5.11
    image: localhost:5000/ollama
    imagePullPolicy: IfNotPresent
    resources:
      requests:
        cpu: 1
        memory: 1Gi
      limits:
        cpu: 2
        memory: 8Gi
    ports:
    - containerPort: 11434
      name: ollama-port
      protocol: TCP
  terminationGracePeriodSeconds: 0

---
apiVersion: v1
kind: Service
metadata:
  name: ollama-svc
  namespace: jseries
spec:
  ports:
  - name: ollama-port
    port: 11434
    protocol: TCP
  selector:
    app: ollama
  type: NodePort
